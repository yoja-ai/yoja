AWSTemplateFormatVersion: '2010-09-09'
Transform : AWS::Serverless-2016-10-31

Description: yoja.ai stack

Parameters:
  cftVersion:
    Type: String
    Default: 0.2.4
    Description: 'Version of Yoja UI static HTML and Javascript files'
  YojaApiServiceSemanticVersionParameter:
    Type: String
    Default: 0.2.6
  YojaWebhookServiceSemanticVersionParameter:
    Type: String
    Default: 0.1.2
  yojaServiceDnsName:
    Type: String
    Description: the DNS name for the service.  For example, yoja.com.  chat.yoja.com is a subdomain needed under this
  yojaChatSubdomain:
    Type: String
    Description: subdomain under yojaServiceDnsName
    Default: chat
  PreexistingCertificateARN:
    Type: String
    Description: 'ARN of pre-existing certificate in the region where stack is being installed e.g. ARN of cert for chat.yoja.ai'
  OauthClientId:
    Type: String
  OauthClientSecret:
    Type: String
  DropboxOauthClientId:
    Type: String
  DropboxOauthClientSecret:
    Type: String
  OauthRedirectUri: 
    Type: String
    Description:  similar to https://chat.xxxxxxx/rest/entrypoint/oauth2cb
  OpenaiApiKey:
    Type: String
  CspNonce:
    Type: String
Mappings:
  RegionMap:
    us-east-1:
      SARYojaApiService: arn:aws:serverlessrepo:us-east-1:058264066930:applications/YojaApi
      SARYojaWebhookService: arn:aws:serverlessrepo:us-east-1:058264066930:applications/YojaWebhookApi
Resources:
  CustomLambdasRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Role for the Lambda that generates ddb table name by replacing
        . with - and prefixing infinstor-mlflow-server-
      Path: /
      RoleName:
        Fn::Join:
        - '-'
        - - CustomLambdasRole
          - Fn::Select:
            - 2
            - Fn::Split:
              - /
              - Ref: AWS::StackId
      Policies:
      - PolicyName: AllowCustomLambdaToWriteCloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
        # Needed for custom resource lambda CreateTableName below to make S3 calls
      - PolicyName: AllowS3Operations
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: arn:aws:s3:::*
      -
        PolicyName: 'AllowDBT'
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:query
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:scan
              - dynamodb:BatchGetItem
              - dynamodb:DeleteItem
              - dynamodb:ListTables  
              - dynamodb:BatchWriteItem
              - dynamodb:PartiQLInsert      # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-iam.html
              - dynamodb:PartiQLUpdate
              - dynamodb:PartiQLDelete  
              - dynamodb:PartiQLSelect
              Resource: '*'  
  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt:
        - CustomLambdasRole
        - Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import re
          import logging
          import boto3
          
          def lambda_handler(event, context):
            print('evt=' + str(event))
            request_type:str = event['RequestType']
            yojaServiceDnsName:str = event['ResourceProperties']['yojaServiceDnsName']
            try:
              # 'Create' | 'Update' | 'Delete'
              if request_type.lower() == 'create' or request_type.lower() == 'update':
                htmlBucketPrefix:str = event['ResourceProperties']['htmlBucketPrefix']
                indexBucketPrefix:str = event['ResourceProperties']['indexBucketPrefix']
                scratchBucketPrefix:str = event['ResourceProperties']['scratchBucketPrefix']
                
                yojaServiceDnsNameWithDashes:str = yojaServiceDnsName.replace('.', '-')
                
                htmlBucketName:str; indexBucketName:str; scratchBucketName:str
                htmlBucketName, indexBucketName, scratchBucketName = [ bucket_name_pre + '-' + yojaServiceDnsNameWithDashes for bucket_name_pre in [htmlBucketPrefix, indexBucketPrefix, scratchBucketPrefix] ]
            
                # https://docs.python.org/3/library/re.html
                # https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html: Bucket names must be between 3 (min) and 63 (max) characters long; Bucket names can consist only of lowercase letters, numbers, dots (.), and hyphens (-)
                # output_bucket_name,count_subs = re.subn('[^a-z0-9.-]','-', output_bucket_name.lower())
            
                responseData = {}
                responseData['yojaServiceDnsNameWithDashes'] = yojaServiceDnsNameWithDashes
                responseData['htmlBucketName'] = htmlBucketName
                responseData['indexBucketName'] = indexBucketName
                responseData['scratchBucketName'] = scratchBucketName
                #print(responseData)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, yojaServiceDnsName)
              # delete 
              else:
                #pass
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {},yojaServiceDnsName)
            except Exception as e:
              logging.error(f'create_table_name lambda handler: caught exception={e}', exc_info=e)
              cfnresponse.send(event, context, cfnresponse.FAILED, { 'error': str(e) }, yojaServiceDnsName)
  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CustomResourceLambda
        - Arn
      yojaServiceDnsName: !Ref yojaServiceDnsName
      htmlBucketPrefix: 'yoja-html'
      indexBucketPrefix: 'yoja-index'
      scratchBucketPrefix: 'yoja-scratch'
  YojaScratchBucket:
    Type: AWS::S3::Bucket    
    Properties:
      # https://stackoverflow.com/questions/68947257/how-to-replace-character-in-a-string-variable-using-cloudformation
      BucketName:  !GetAtt [ CustomResource, 'scratchBucketName']
  YojaHtmlBucket:
    Type: AWS::S3::Bucket
    Properties:
         BucketName: !GetAtt [ CustomResource, 'htmlBucketName']
  YojaIndexBucket:
    Type: AWS::S3::Bucket
    Properties:
         BucketName: !GetAtt [ CustomResource, 'indexBucketName']
  YojaHtmlBucketOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "OAI for Yoja Html bucket"
  YojaHtmlBucketBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref YojaHtmlBucket
      PolicyDocument:
        Statement:
        - Action:
            - "s3:GetObject"
            - "s3:ListBucket"
          Effect: Allow
          Resource:
            - !Sub arn:aws:s3:::${YojaHtmlBucket}/*
            - !Sub arn:aws:s3:::${YojaHtmlBucket}
          Principal:
            CanonicalUser: !GetAtt YojaHtmlBucketOriginAccessIdentity.S3CanonicalUserId          
  YojaServiceConfTable: 
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: 'yoja-ServiceConf'
      AttributeDefinitions: 
        - 
          AttributeName: "configVersion"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "configVersion"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
  YojaUsersTable: 
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: 'yoja-users'
      AttributeDefinitions: 
        -
          AttributeName: "email"
          AttributeType: "S"
        -
          AttributeName: "dropbox_sub"
          AttributeType: "S"
      KeySchema: 
        -
          AttributeName: "email"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes: 
        -
          IndexName: "dropbox_sub-index"
          KeySchema:
            -
              AttributeName: "dropbox_sub"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
  YojaApiService:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - SARYojaApiService
        SemanticVersion:
          Ref: YojaApiServiceSemanticVersionParameter
      Parameters:
        OauthClientId: !Ref OauthClientId
        OauthClientSecret: !Ref OauthClientSecret
        DropboxOauthClientId: !Ref DropboxOauthClientId
        DropboxOauthClientSecret: !Ref DropboxOauthClientSecret
        OauthRedirectUri: !Ref OauthRedirectUri
        UsersTable: !Ref YojaUsersTable
        ServiceconfTable: !Ref YojaServiceConfTable
        CookieDomain: !Ref yojaServiceDnsName
        OpenaiApiKey: !Ref OpenaiApiKey
        MainLambdasSarSemanticVersion: !Ref YojaApiServiceSemanticVersionParameter
        WebhookLambdasSarSemanticVersion: !Ref YojaWebhookServiceSemanticVersionParameter
        UiSemanticVersion: !Ref cftVersion
  YojaApiInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: YojaApiService
    Properties:
      FunctionName:
        Fn::GetAtt:
        - YojaApiService
        - Outputs.GetversionFunctionArn
      FunctionUrlAuthType: NONE
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
  YojaWebhookService:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId:
          Fn::FindInMap:
          - RegionMap
          - Ref: AWS::Region
          - SARYojaWebhookService
        SemanticVersion:
          Ref: YojaWebhookServiceSemanticVersionParameter
      Parameters:
        OauthClientId: !Ref OauthClientId
        OauthClientSecret: !Ref OauthClientSecret
        DropboxOauthClientId: !Ref DropboxOauthClientId
        DropboxOauthClientSecret: !Ref DropboxOauthClientSecret
        UsersTable: yoja-users
        ServiceconfTable: yoja-ServiceConf
        YojaApiEntrypointFunctionArn: !GetAtt [YojaApiService, Outputs.GetversionFunctionArn]
  YojaWebhookDropboxInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: YojaWebhookService
    Properties:
      FunctionName: !GetAtt [YojaWebhookService, Outputs.DropboxWebhookFunctionArn]
      FunctionUrlAuthType: NONE
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
  YojaWebhookGDriveInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: YojaWebhookService
    Properties:
      FunctionName: !GetAtt [YojaWebhookService, Outputs.GDriveWebhookFunctionArn]
      FunctionUrlAuthType: NONE
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
  YojaStaticResponseHeaderPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ${AWS::Region}-YojaStaticResponseHeaderPolicy
        SecurityHeadersConfig:
          XSSProtection:
            Override: true
            Protection: true
            ModeBlock: true
          FrameOptions:
            Override: true
            FrameOption: SAMEORIGIN
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: strict-origin-when-cross-origin
          ContentSecurityPolicy:
            Override: false
            ContentSecurityPolicy: !Join
                - ''
                - - "default-src 'self' accounts.google.com; font-src fonts.gstatic.com; img-src 'self' *.googleusercontent.com;  frame-ancestors 'self'; form-action 'self'; style-src 'self' fonts.googleapis.com https://accounts.google.com/gsi/style 'nonce-"
                  - !Ref CspNonce
                  - "';"
          ContentTypeOptions:
            Override: true
          StrictTransportSecurity:
            Override: true
            IncludeSubdomains: false
            Preload: false
            AccessControlMaxAgeSec: 31536000
        CustomHeadersConfig:
          Items:
            - Header: Permissions-Policy
              Value: accelerometer=(), camera=(), microphone=(), geolocation=(), usb=()
              Override: true
            - Header: cache-control
              Value: public, max-age, immutable
              Override: true
        RemoveHeadersConfig:
          Items:
            - Header: SERVER
            - Header: X-Powered-By
  YojaErrorsResponseHeaderPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ${AWS::Region}-YojaErrorsResponseHeaderPolicy
        SecurityHeadersConfig:
          XSSProtection:
            Override: true
            Protection: true
            ModeBlock: true
          FrameOptions:
            Override: true
            FrameOption: SAMEORIGIN
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: strict-origin-when-cross-origin
          ContentSecurityPolicy:
            Override: false
            ContentSecurityPolicy: !Join
                - ''
                - - "default-src 'self' accounts.google.com; font-src fonts.gstatic.com; img-src 'self' *.googleusercontent.com;  frame-ancestors 'self'; form-action 'self'; style-src 'self' fonts.googleapis.com https://accounts.google.com/gsi/style 'nonce-"
                  - !Ref CspNonce
                  - "';"
          ContentTypeOptions:
            Override: true
          StrictTransportSecurity:
            Override: true
            IncludeSubdomains: false
            Preload: false
            AccessControlMaxAgeSec: 31536000
        CustomHeadersConfig:
          Items:
            - Header: Permissions-Policy
              Value: accelerometer=(), camera=(), microphone=(), geolocation=(), usb=()
              Override: true
            - Header: cache-control
              Value: no-cache, no-store, must-revalidate, private
              Override: true
            - Header: pragma
              Value: no-cache
              Override: true
            - Header: expires
              Value: 0
              Override: true
        RemoveHeadersConfig:
          Items:
            - Header: SERVER
            - Header: X-Powered-By
  YojaRestResponseHeaderPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub ${AWS::Region}-YojaRestResponseHeaderPolicy
        SecurityHeadersConfig:
          XSSProtection:
            Override: true
            Protection: true
            ModeBlock: true
          FrameOptions:
            Override: true
            FrameOption: SAMEORIGIN
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: strict-origin-when-cross-origin
          ContentSecurityPolicy:
            Override: false
            ContentSecurityPolicy: !Join
                - ''
                - - "default-src 'self' accounts.google.com; font-src fonts.gstatic.com; img-src 'self' *.googleusercontent.com;  frame-ancestors 'self'; form-action 'self'; style-src 'self' fonts.googleapis.com https://accounts.google.com/gsi/style 'nonce-"
                  - !Ref CspNonce
                  - "';"
          ContentTypeOptions:
            Override: true
          StrictTransportSecurity:
            Override: true
            IncludeSubdomains: false
            Preload: false
            AccessControlMaxAgeSec: 31536000
        CustomHeadersConfig:
          Items:
            - Header: Permissions-Policy
              Value: accelerometer=(), camera=(), microphone=(), geolocation=(), usb=()
              Override: true
            - Header: cache-control
              Value: no-cache, no-store, must-revalidate, private
              Override: true
            - Header: pragma
              Value: no-cache
              Override: true
            - Header: expires
              Value: 0
              Override: true
        RemoveHeadersConfig:
          Items:
            - Header: SERVER
            - Header: X-Powered-By
  YojaUnwatedHeadersCloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: unwanted-headers
      AutoPublish: true 
      FunctionCode: |
        function handler(event) {
            try {
                const request = event.request;
                const headers = request.headers;
                console.log("headers=" + headers);
                if ("x-original-url" in headers) {
                    console.log("x-original-url present in headers. Returning 403");
                    var response = {
                        statusCode: 403,
                        statusDescription: "x-original-url header not permitted",
                        headers: {
                            "cloudfront-functions": { value: "generated-by-CloudFront-Functions" }
                        }
                    };
                    return response;
                } else {
                    return request;
                }
            } catch (error) {
                console.log("Caught Exception " + error);
                var eresp = {
                        statusCode: 500,
                        statusDescription: "unwanted header function failed",
                        headers: {
                            "cloudfront-functions": { value: "generated-by-CloudFront-Functions" }
                        }
                    };
                return eresp;
            }
        }
      FunctionConfig:
        Comment: Rejects requests with certain headers present. For OWASP Zap testing.
        Runtime: cloudfront-js-2.0
  YojaDisallowTraceCloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: disallow-trace
      AutoPublish: true 
      FunctionCode: |
        function handler(event) {
            try {
                const request = event.request;
                console.log("request.method=" + request.method);
                if (request.method == "TRACE" || request.method == "OPTIONS") {
                    console.log("TRACE.OPTIONS methods not allowed. Returning 403");
                    var response = {
                        statusCode: 403,
                        statusDescription: "TRACE,OPTIONS methods not permitted",
                        headers: {
                            "cloudfront-functions": { value: "generated-by-CloudFront-Functions" }
                        }
                    };
                    return response;
                } else {
                    return request;
                }
            } catch (error) {
                console.log("Caught Exception " + error);
                var eresp = {
                        statusCode: 500,
                        statusDescription: "disallow trace options function failed",
                        headers: {
                            "cloudfront-functions": { value: "generated-by-CloudFront-Functions" }
                        }
                    };
                return eresp;
            }
        }
      FunctionConfig:
        Comment: Rejects requests with certain methods. For OWASP Zap testing.
        Runtime: cloudfront-js-2.0
  YojaStaticFilesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Create s3 bucket and populate with static html/js for yoja'
      Handler: index.handler
      Role: !GetAtt CustomLambdasRole.Arn
      Timeout: 900
      # error in ap-southeast-2: Resource handler returned message: "'MemorySize' value failed to satisfy constraint: Member must have value less than or equal to 3008
      MemorySize: 3008
      Runtime: python3.9
      Code:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-zipfile
        # (Node.js and Python) The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package. For the Handler property, the first part of the handler identifier must be index. For example, index.handler.
        # Your source code can contain up to 4096 characters. For JSON, you must escape quotes and special characters such as newline (\n) with a backslash.
        # If you specify a function that interacts with an AWS CloudFormation custom resource, you don't have to write your own functions to send responses to the custom resource that invoked the function. AWS CloudFormation provides a response module (cfn-response) that simplifies sending responses. See Using AWS Lambda with AWS CloudFormation for details.
        ZipFile: |
          import boto3
          import cfnresponse
          import urllib3
          import time
          import os
          import zipfile
          from typing import List
          import mimetypes

          # pylint: disable=bad-indentation

          def handler(event, context):
              print(f'event={event}')
              print(f'context={context}')
              response_data = {}
              try:
                # Init ...
                the_event = event['RequestType']
                print('The event is: ' + str(the_event))
                s_3 = boto3.client('s3')
                # Retrieve parameters
                yojaHtmlBucket =       event['ResourceProperties']['yojaHtmlBucket']
                yojaOAuthRedirectUri = event['ResourceProperties']['yojaOAuthRedirectUri']
                yojaApiEndpoint =      event['ResourceProperties']['yojaApiEndpoint']
                yojaApiKey =           event['ResourceProperties']['yojaApiKey']
                yojaGoogleClientId =   event['ResourceProperties']['yojaGoogleClientId']
                yojaDropboxClientId =  event['ResourceProperties']['yojaDropboxClientId']
                yojaCftVersion =       event['ResourceProperties']['yojaCftVersion']

                if the_event == 'Create':
                  create_all(s_3, yojaHtmlBucket, yojaOAuthRedirectUri, yojaApiEndpoint, yojaApiKey, yojaGoogleClientId, yojaDropboxClientId, yojaCftVersion)
                  # Everything OK... send the signal back
                  print('Operation successful!')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data,  physicalResourceId=yojaHtmlBucket)
                elif the_event == 'Update':
                  delete_all(s_3, yojaHtmlBucket)
                  create_all(s_3, yojaHtmlBucket, yojaOAuthRedirectUri, yojaApiEndpoint, yojaApiKey, yojaGoogleClientId, yojaDropboxClientId, yojaCftVersion)
                  # Everything OK... send the signal back
                  print('Operation successful!')
                  cfnresponse.send(event, context,  cfnresponse.SUCCESS, response_data, physicalResourceId=yojaHtmlBucket)
                elif the_event == 'Delete':
                  delete_all(s_3, yojaHtmlBucket)
                  # Everything OK... send the signal back
                  print('Operation successful!')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId=yojaHtmlBucket)
              except Exception as e:
                print('Operation failed...')
                print(str(e))
                response_data['Data'] = str(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physicalResourceId=yojaHtmlBucket)

          def create_all(s_3, yojaHtmlBucket, yojaOAuthRedirectUri, yojaApiEndpoint, yojaApiKey, yojaGoogleClientId, yojaDropboxClientId, yojaCftVersion) :
              # create serviceconfig.js for the dashboard ui
              create_serviceconfig_1(s_3, yojaHtmlBucket, yojaOAuthRedirectUri, yojaApiEndpoint, yojaApiKey, yojaGoogleClientId, yojaDropboxClientId, yojaCftVersion)
              # copy dashboard files from infinstordist to this service bucket
              copy_dashboard_files(yojaCftVersion, s_3, yojaHtmlBucket)

          def create_serviceconfig_1(s_3, yojaHtmlBucket, yojaOAuthRedirectUri, yojaApiEndpoint, yojaApiKey, yojaGoogleClientId, yojaDropboxClientId, yojaCftVersion):
              with open('/tmp/serviceconfig.js', 'w') as wfp:
                  service_config_str:str = "var ServiceConfig = { " + \
                  f"""OAUTH_REDIRECT_URI: \"{yojaOAuthRedirectUri}\", 
                    envAPIEndpoint: \"{yojaApiEndpoint}\", 
                    envAPIKey: \"{yojaApiKey}\", 
                    GOOGLE_CLIENT_ID: \"{yojaGoogleClientId}\", 
                    DROPBOX_CLIENT_ID: \"{yojaDropboxClientId}\" """ + \
                  "}"
                  
                  wfp.write(service_config_str)
                  
              print(f"service_config_str={service_config_str}")
              s3_prefix:str = 'html/serviceconfig.js'
              print(f"Creating s3://{yojaHtmlBucket}/{s3_prefix}")
              s_3.upload_file('/tmp/serviceconfig.js', yojaHtmlBucket, s3_prefix, ExtraArgs={'ContentType': 'application/javascript'})

          def delete_all(s_3, the_bucket):
              print('Deleting all objects from bucket=' + str(the_bucket))
              delete_s_3 = boto3.client('s3')
              paginator = s_3.get_paginator('list_object_versions')
              page_iterator = paginator.paginate(Bucket=the_bucket)
              for page in page_iterator:
                if ('Versions' in page):
                  aob = page['Versions']
                  oa = []
                  for obj in aob:
                    oe = {}
                    oe['Key'] = obj['Key']
                    if 'VersionId' in obj and obj['VersionId'] and obj['VersionId'] != 'null':
                      oe['VersionId'] = obj['VersionId']
                      print('Adding key=' + str(oe['Key']) + ' vers=' + str(oe['VersionId']) + ' to del list')
                    else:
                      print('Adding key=' + str(oe['Key']) + ' to del list')
                    oa.append(oe)

                  dobjs = {}
                  dobjs['Objects'] = oa
                  dobjs['Quiet'] = True
                  print('deleting ' + str(len(oa)) + ' object versions')
                  delete_s_3.delete_objects(Bucket=the_bucket, Delete=dobjs)
                  print('deleted ' + str(len(oa)) + ' object versions')

                if ('DeleteMarkers' in page):
                  aob = page['DeleteMarkers']
                  oa = []
                  for obj in aob:
                    oe = {}
                    oe['Key'] = obj['Key']
                    if 'VersionId' in obj and obj['VersionId'] and obj['VersionId'] != 'null':
                      oe['VersionId'] = obj['VersionId']
                      print('Adding delmarker=' + str(oe['Key']) + ' vers=' + str(oe['VersionId']) + ' to del list')
                    else:
                      print('Adding delmarker=' + str(oe['Key']) + ' to del list')
                    oa.append(oe)

                  dobjs = {}
                  dobjs['Objects'] = oa
                  dobjs['Quiet'] = True
                  print('deleting ' + str(len(oa)) + ' delete markers')
                  delete_s_3.delete_objects(Bucket=the_bucket, Delete=dobjs)
                  print('deleted ' + str(len(oa)) + ' delete markers')

          def copy_dashboard_files(cftVersion, s_3, the_bucket):
              base_url = 'https://yojadist.s3.amazonaws.com/builds/' + cftVersion
              http = urllib3.PoolManager()
              
              # download dashboard zip file and copy to s3
              web_ui_zip_fname:str = "web_ui.zip"
              resp = http.request('GET', base_url + '/' + web_ui_zip_fname)
              if (resp.status != 200):
                estr = 'Download of dashboard filelist failed. http status=' + str(resp.status)
                print(estr)
                raise ValueError(estr)
              s_3.put_object(Body=resp.data, Bucket=the_bucket, Key='html/' + web_ui_zip_fname, ContentType=resp.headers['Content-Type'])

              # write dashboard_files.zip to /tmp directory
              web_ui_zip_fpath = '/tmp/'+web_ui_zip_fname
              with open(web_ui_zip_fpath, "wb") as fh:
                fh.write(resp.data)
                
              # read the .zip file and copy to s3 bucket
              zipf:zipfile.ZipFile
              with zipfile.ZipFile(web_ui_zip_fpath) as zipf:
                  filelist:List[zipfile.ZipInfo] = zipf.filelist;  file_zipinfo:zipfile.ZipInfo
                  for file_zipinfo in filelist:
                      print(f"file_zipinfo={file_zipinfo}")
                      # if archive member is a file
                      if not file_zipinfo.is_dir(): 
                          # read the file
                          file_bytes:bytes = zipf.read(file_zipinfo)
                          # determine its mime type.  without this, file content type is set to binary/octet-stream, even for .html files, when http served from s3 bucket
                          content_type, encoding = mimetypes.guess_type(file_zipinfo.filename, strict=False)
                          s3_prefix:str='html/' + file_zipinfo.filename
                          if content_type:
                            s_3.put_object(Body=file_bytes, Bucket=the_bucket, Key=s3_prefix, ContentType=content_type)
                          else:
                            s_3.put_object(Body=file_bytes, Bucket=the_bucket, Key=s3_prefix) #, ContentType=r1.headers['Content-Type'])
                          print(f"wrote to s3://{the_bucket}/{s3_prefix} with content_type={content_type}")
  YojaStaticFilesCustomResource:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html
    # In a CloudFormation template, you use the AWS::CloudFormation::CustomResource or Custom::String resource type to specify custom resources.
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt YojaStaticFilesLambdaFunction.Arn
      yojaHtmlBucket: !Ref YojaHtmlBucket
      yojaOAuthRedirectUri: !Ref OauthRedirectUri
      yojaApiEndpoint: !Sub "https://chat.${yojaServiceDnsName}/rest"
      yojaApiKey: unused
      yojaGoogleClientId: !Ref OauthClientId
      yojaDropboxClientId: !Ref DropboxOauthClientId
      yojaCftVersion: !Ref cftVersion
  YojaCloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - YojaApiService
      - YojaStaticResponseHeaderPolicy
      - YojaErrorsResponseHeaderPolicy
      - YojaRestResponseHeaderPolicy
      - YojaStaticFilesCustomResource
    Properties:
      DistributionConfig:
        Enabled: 'true'
        DefaultRootObject: login.html
        Aliases:
          - !Join
            - .
            - - !Ref yojaChatSubdomain
              - !Ref yojaServiceDnsName
        CustomErrorResponses:
        - ErrorCode: '404'
          ResponsePagePath: "/errors/404.html"
          ResponseCode: '404'
          ErrorCachingMinTTL: '10'
        - ErrorCode: '405'
          ResponsePagePath: "/errors/405.html"
          ResponseCode: '405'
          ErrorCachingMinTTL: '10'
        Origins:
          - Id: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaApiService.Outputs.EntrypointFunctionUrlConfig
            DomainName: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaApiService.Outputs.EntrypointFunctionUrlConfig
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginReadTimeout: 60
          - Id: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaWebhookService.Outputs.GDriveWebhookFunctionUrlConfig
            DomainName: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaWebhookService.Outputs.GDriveWebhookFunctionUrlConfig
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginReadTimeout: 60
          - Id: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaWebhookService.Outputs.DropboxWebhookFunctionUrlConfig
            DomainName: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaWebhookService.Outputs.DropboxWebhookFunctionUrlConfig
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginReadTimeout: 60
          - Id: !GetAtt YojaHtmlBucket.RegionalDomainName
            ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt YojaHtmlBucket.RegionalDomainName
            OriginPath: /html
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref YojaHtmlBucketOriginAccessIdentity
        CacheBehaviors:
          - Compress: false
            PathPattern: /rest/*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            SmoothStreaming: false
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            ResponseHeadersPolicyId: !GetAtt YojaRestResponseHeaderPolicy.Id
            TargetOriginId: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaApiService.Outputs.EntrypointFunctionUrlConfig
            ViewerProtocolPolicy: https-only
            FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !GetAtt YojaDisallowTraceCloudFrontFunction.FunctionARN
          - Compress: false
            PathPattern: /webhook/webhook_gdrive
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            SmoothStreaming: false
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            TargetOriginId: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaWebhookService.Outputs.GDriveWebhookFunctionUrlConfig
            ViewerProtocolPolicy: https-only
          - Compress: false
            PathPattern: /webhook/webhook_dropbox
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            SmoothStreaming: false
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            TargetOriginId: !Select
              - 2
              - !Split
                - /
                - !GetAtt YojaWebhookService.Outputs.DropboxWebhookFunctionUrlConfig
            ViewerProtocolPolicy: https-only
          - Compress: false
            PathPattern: /errors
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            AllowedMethods:
              - GET
              - HEAD
            SmoothStreaming: false
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            ResponseHeadersPolicyId: !GetAtt YojaErrorsResponseHeaderPolicy.Id
            TargetOriginId: !GetAtt YojaHtmlBucket.RegionalDomainName
            ViewerProtocolPolicy: https-only
            FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !GetAtt YojaUnwatedHeadersCloudFrontFunction.FunctionARN
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          TargetOriginId: !GetAtt YojaHtmlBucket.RegionalDomainName
          ViewerProtocolPolicy: https-only
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
          ResponseHeadersPolicyId: !GetAtt YojaStaticResponseHeaderPolicy.Id
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt YojaUnwatedHeadersCloudFrontFunction.FunctionARN
        ViewerCertificate:
          AcmCertificateArn: !Ref PreexistingCertificateARN
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
  PopulateDDBLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt:
        - CustomLambdasRole
        - Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import cfnresponse
          import os
          from typing import Any, Dict, List, Tuple, Union
          import typing
          import boto3
          import botocore
          import botocore.client
          if typing.TYPE_CHECKING:
              from mypy_boto3_dynamodb.client import DynamoDBClient
          else:
              DynamoDBClient = object
          from typing import TYPE_CHECKING
          if TYPE_CHECKING:
              from mypy_boto3_dynamodb import DynamoDBClient
              from mypy_boto3_dynamodb.type_defs import ExecuteStatementOutputTypeDef
              from mypy_boto3_dynamodb.service_resource import Table
              
              from mypy_boto3_s3 import S3Client
              from mypy_boto3_s3.type_defs import GetBucketLocationOutputTypeDef
          else:
              DynamoDBClient = object
              ExecuteStatementOutputTypeDef = object
              Table = object
              
              CognitoIdentityProviderClient = object
              AdminListGroupsForUserResponseTypeDef = object; GroupTypeTypeDef=object; AdminGetUserResponseTypeDef=object; AttributeTypeTypeDef = object; AdminCreateUserResponseTypeDef = object; UserTypeTypeDef = object; EmptyResponseMetadataTypeDef = object
              
              S3Client = object
              GetBucketLocationOutputTypeDef = object
          #from cryptography.fernet import Fernet

          import logging
          logger = logging.getLogger(__name__)
          logger.setLevel(logging.getLevelName(os.getenv("LAMBDA_LOG_LEVEL", "INFO")))

          def _insert_serviceconf_partiql(serviceconf_table_name:str, index_bucket_name:str) -> Tuple[bool, str]:
              try:
                  # # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.update.html
                  # # UPDATE  table  
                  # # [SET | REMOVE]  path  [=  data] […]
                  # # WHERE condition [RETURNING returnvalues]
                  # # <returnvalues>  ::= [ALL OLD | MODIFIED OLD | ALL NEW | MODIFIED NEW] *
                  # set_clauses:str = ""
                  # for key,val in update_dict.items():
                  #     set_clauses = set_clauses + f" SET {key}='{val}' "
                  # # Note: table name must be double quoted due to the use of '-' in the name: infinstor-Subscribers
                  # # Error: ValidationException: Where clause does not contain a mandatory equality on all key attributes
                  # update_stmt:str = f"UPDATE \"{os.environ['SUBSCRIBERS_TABLE']}\" {set_clauses} WHERE customerId = '{customer_id}' AND productCode = '{product_code}' RETURNING ALL NEW *"
                  # print(f"Executing update_stmt for subscriber {cognito_username} = {update_stmt}")
                  
                  ddb_client:DynamoDBClient = boto3.client('dynamodb')
                  if not ddb_client: return False, "Unable to get ddb_client for service"
                  
                  # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.insert.html
                  insert_stmt:str = f"INSERT INTO \"{serviceconf_table_name}\" VALUE " + "{" + f"'configVersion':1, 'bucket':'{index_bucket_name}', 'prefix':'index2' " +  "}"
                  
                  # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.execute_statement
                  # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ExecuteStatement.html
                  # response = {'Items': [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, ...], 'ResponseMetadata': {'RequestId': 'CHBDU0TEJ6UH82VNOMPA9F8I3NVV4KQNSO5AEMVJF66Q9ASUAAJG', 'HTTPStatusCode': 200, 'HTTPHeaders': {...}, 'RetryAttempts': 0}}
                  exec_stmt_resp:ExecuteStatementOutputTypeDef = ddb_client.execute_statement(Statement=insert_stmt)
                  ddb_http_status_code:int = exec_stmt_resp.get('ResponseMetadata').get('HTTPStatusCode')
                  if ddb_http_status_code != 200: return False, f"dynamodb http status code={ddb_http_status_code} headers={exec_stmt_resp['ResponseMetadata'].get('HTTPHeaders')}"
                  
                  return True, ""
              except Exception as e:
                  logger.error(f"Exception caught during ddb serviceconf statment: {e}", exc_info=e)
                  return False, str(e)

          def _delete_serviceconf_partiql(serviceconf_table_name:str) -> Tuple[bool, str]:
              try:
                  # # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.update.html
                  # # UPDATE  table  
                  # # [SET | REMOVE]  path  [=  data] […]
                  # # WHERE condition [RETURNING returnvalues]
                  # # <returnvalues>  ::= [ALL OLD | MODIFIED OLD | ALL NEW | MODIFIED NEW] *
                  # set_clauses:str = ""
                  # for key,val in update_dict.items():
                  #     set_clauses = set_clauses + f" SET {key}='{val}' "
                  # # Note: table name must be double quoted due to the use of '-' in the name: infinstor-Subscribers
                  # # Error: ValidationException: Where clause does not contain a mandatory equality on all key attributes
                  # update_stmt:str = f"UPDATE \"{os.environ['SUBSCRIBERS_TABLE']}\" {set_clauses} WHERE customerId = '{customer_id}' AND productCode = '{product_code}' RETURNING ALL NEW *"
                  # print(f"Executing update_stmt for subscriber {cognito_username} = {update_stmt}")
                  
                  ddb_client:DynamoDBClient = boto3.client('dynamodb')
                  if not ddb_client: return False, "Unable to get ddb_client for service"
                  
                  # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.delete.html
                  delete_stmt:str = f"DELETE FROM \"{serviceconf_table_name}\" WHERE \"configVersion\" = 1" 
                  
                  # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.execute_statement
                  # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ExecuteStatement.html
                  # response = {'Items': [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, ...], 'ResponseMetadata': {'RequestId': 'CHBDU0TEJ6UH82VNOMPA9F8I3NVV4KQNSO5AEMVJF66Q9ASUAAJG', 'HTTPStatusCode': 200, 'HTTPHeaders': {...}, 'RetryAttempts': 0}}
                  exec_stmt_resp:ExecuteStatementOutputTypeDef = ddb_client.execute_statement(Statement=delete_stmt)
                  ddb_http_status_code:int = exec_stmt_resp.get('ResponseMetadata').get('HTTPStatusCode')
                  if ddb_http_status_code != 200: return False, f"dynamodb http status code={ddb_http_status_code} headers={exec_stmt_resp['ResponseMetadata'].get('HTTPHeaders')}"
                  
                  return True, ""
              except Exception as e:
                  logger.error(f"Exception caught during ddb serviceconf statment: {e}", exc_info=e)
                  return False, str(e)

          def lambda_handler(event, context):
            print('evt=' + str(event))
            request_type:str = event['RequestType']
            serviceConfTableName:str = event['ResourceProperties']['serviceConfTableName']
            try:
              # 'Create' | 'Update' | 'Delete'
              if request_type.lower() == 'create':
                indexBucketName:str = event['ResourceProperties']['indexBucketName']
                # don't populate the 'key' in serviceconf; autopopulated by the backend in the api if it doesn't exist
                # keyStr:str  = '' #Fernet.generate_key().decode()
                
                success, errmsg = _insert_serviceconf_partiql(serviceConfTableName, indexBucketName)
                  
                responseData = {}
                print(responseData)
                cfnresponse.send(event, context, cfnresponse.SUCCESS if success else cfnresponse.FAILED, responseData if success else {'error':errmsg} , serviceConfTableName)
              # delete
              elif request_type.lower() == 'delete':
                serviceConfTableName:str = event['ResourceProperties']['serviceConfTableName']
                success, errmsg = _delete_serviceconf_partiql(serviceConfTableName)
                  
                responseData = {}
                print(responseData)
                cfnresponse.send(event, context, cfnresponse.SUCCESS if success else cfnresponse.FAILED, responseData if success else {'error':errmsg} , serviceConfTableName)
              # update
              else:
                #pass
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {},serviceConfTableName)
            except Exception as e:
              logging.error(f'populate_ddb_custom_resource lambda handler: caught exception={e}', exc_info=e)
              cfnresponse.send(event, context, cfnresponse.FAILED, { 'error': str(e) }, serviceConfTableName)
  PopulateDDBCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt [PopulateDDBLambda, Arn]
      serviceConfTableName: !Ref YojaServiceConfTable
      indexBucketName: !Ref YojaIndexBucket
      keyStr: ''
