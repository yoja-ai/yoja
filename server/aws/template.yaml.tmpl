AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Yoja AI API

Parameters:
  LambdaVersion:
    Type: String
    Description: Version of Lambdas
    Default: VVVVVVVVVV
  OauthClientId:
    Type: String
  OauthClientSecret:
    Type: String
  DropboxOauthClientId:
    Type: String
  DropboxOauthClientSecret:
    Type: String
  OauthRedirectUri:
    Type: String
  UsersTable:
    Type: String
  ServiceconfTable:
    Type: String
  CookieDomain:
    Type: String
  OpenaiApiKey:
    Type: String
Globals:
  Function:
    Environment:
      Variables:
        LAMBDA_VERSION: !Ref LambdaVersion
        OAUTH_CLIENT_ID: !Ref OauthClientId
        OAUTH_CLIENT_SECRET: !Ref OauthClientSecret
        DROPBOX_OAUTH_CLIENT_ID: !Ref DropboxOauthClientId
        DROPBOX_OAUTH_CLIENT_SECRET: !Ref DropboxOauthClientSecret
        OAUTH_REDIRECT_URI: !Ref OauthRedirectUri
        USERS_TABLE: !Ref UsersTable
        SERVICECONF_TABLE: !Ref ServiceconfTable
        COOKIE_DOMAIN: !Ref CookieDomain
        HF_HUB_OFFLINE: '1'
        HF_HOME: '/tmp'
        TRANSFORMERS_OFFLINE: '1'
        OPENAI_API_KEY: !Ref OpenaiApiKey
        PYTHONUNBUFFERED: 'True'
Metadata:
  AWS::ServerlessRepo::Application:
    Name: YojaApi
    Description: Yoja API
    Author: Yoja AI
    SpdxLicenseId: MIT
    LicenseUrl: s3://yojadist/license/LICENSE
    # ReadmeUrl: README.md
    Labels: ['tests']
    HomePageUrl: https://www.yoja.ai
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/yoja-ai/yoja
Resources:
  YojaLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        -
          PolicyName: 'AllowSTS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'sts:AssumeRole'
                Resource: '*'
        -
          PolicyName: 'AllowPassRole'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: '*'
        -
          PolicyName: 'AllowInvokeOtherLambda'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
        -
          PolicyName: AllowDdb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              Resource:
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/yoja-users
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/yoja-users/index/dropbox_sub-index
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/yoja-ServiceConf
        -
          # https://stackoverflow.com/questions/65137639/lambda-does-not-have-permission-to-access-the-ecr-image: permissions to be added to the lambda role
          # Lambda does not have permission to access the ECR image. Check the ECR permissions
          PolicyName: ECRPermissionsForLambda
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - ecr:SetRepositoryPolicy
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:CompleteLayerUpload
              - ecr:DescribeImages
              - ecr:DescribeRepositories
              - ecr:UploadLayerPart
              - ecr:ListImages
              - ecr:InitiateLayerUpload
              - ecr:BatchCheckLayerAvailability
              - ecr:GetRepositoryPolicy
              - ecr:PutImage
              Resource: '*'
            - Sid: VisualEditor1
              Effect: Allow
              Action: ecr:GetAuthorizationToken
              Resource: '*'          
        - PolicyName: AllowS3Pylaprof
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: arn:aws:s3:::pylaprof/*
        - PolicyName: AllowS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: ListObjectsInBucket
              Effect: Allow
              Action:
              - s3:ListBucket
              Resource:
              - arn:aws:s3:::*
            - Sid: AllObjectActions
              Effect: Allow
              Action: s3:*Object
              Resource:
              - arn:aws:s3:::*/*
  YojaApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,HEAD,OPTIONS,POST,PUT,PATCH,DELETE'"
        AllowHeaders: "'Access-Control-Allow-Headers,Access-Control-Allow-Origin,Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers,x-requested-with,X-Api-Key,Authorization,X-Amz-Date,X-Forwarded-For,Idtoken'"
        AllowCredentials: false
  entrypoint:
    Type: 'AWS::Serverless::Function'
    Properties:
      # https://stackoverflow.com/questions/67330890/using-a-public-ecr-image-for-lambda-function : can't have a public container repository / registry container image
      # https://stackoverflow.com/questions/69997144/specify-imageuri-in-awslambdafunction-throws-cf-error: can't have a public container repository / registry container image
      # https://docs.aws.amazon.com/lambda/latest/dg/images-create.html: To create a Lambda function from a container image, build your image locally and upload it to an Amazon Elastic Container Registry (Amazon ECR) repository. Then, specify the repository URI when you create the function. The Amazon ECR repository must be in the same AWS Region as the Lambda function. You can create a function using an image in a different AWS account, as long as the image is in the same Region as the Lambda function. For more information, see Amazon ECR cross-account permissions.
      # https://stackoverflow.com/questions/65137639/lambda-does-not-have-permission-to-access-the-ecr-image: permissions to be added to the lambda role  ( Lambda does not have permission to access the ECR image. Check the ECR permissions )
      ImageUri: IIIIIIIIII
      MemorySize: 8192
      EphemeralStorage:
        Size: 8192
      Timeout: 900
      PackageType: Image
      ImageConfig:
        Command:
          - entrypoint.entrypoint 
      Description: get version
      Role: !GetAtt YojaLambdaRole.Arn
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
        Cors:
          AllowCredentials: true
          AllowHeaders:
            - authorization
          AllowMethods: 
            - '*'
          AllowOrigins: 
            - '*'
          ExposeHeaders: 
            - access-control-allow-origin
            - access-control-allow-headers
            - access-control-allow-methods
            - access-control-allow-credentials
          MaxAge: 30
      Environment:
        Variables:
          LAMBDA_VERSION: !Ref LambdaVersion
          PYLAPROF_DISABLE: true    # https://github.com/glumia/pylaprof/blob/master/examples/hello-lambda/serverless.yml
          PERIOIDIC_PROCESS_FILES_TIME_LIMIT: 12
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref YojaApi
            Path: /entrypoint
            Method: ANY
Outputs:
  GetversionFunctionArn:
    Description: The Arn of the entrypoint lambda
    Value: !GetAtt entrypoint.Arn
    Export:
      Name: 'yoja:entrypointarn'
  EntrypointFunctionUrlConfig:
    Description: The FunctionUrlConfig of the entrypoint lambda
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-functionurlconfig.html
    # https://xxxx.lambda-url.us-east-1.on.aws/
    Value: !GetAtt entrypointUrl.FunctionUrl
    Export:
      Name: 'yoja:entrypointfunctionurl'
